import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { ApiConstants } from "../../utils/constants/apiConstants";

// Types for Product and API responses
export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  [key: string]: any; // for flexibility, you can tighten this as needed
}

export interface ProductsResponse {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}

// API definition with cache tags
export const productsApi = createApi({
  reducerPath: "products",
  baseQuery: fetchBaseQuery({ baseUrl: ApiConstants.DUMMY_JSON_BASE_URL }),
  tagTypes: ['Product'], // Define cache tags
  endpoints: (builder) => ({
    getAllProduct: builder.query<ProductsResponse, void>({
      query: () => "/products",
      providesTags: ['Product'], // This query provides Product tags
    }),

    getProductById: builder.query<Product, number>({
      query: (id) => `/products/${id}`,
      providesTags: (result, error, id) => [{ type: 'Product', id }], // Specific product tag
    }),

    addNewProduct: builder.mutation<Product, Partial<Product>>({
      query: (newProduct) => ({
        url: `/products/add`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: newProduct,
      }),
      invalidatesTags: ['Product'], // Invalidate all Product queries when adding
    }),

    updateProduct: builder.mutation<Product, { id: number; updatedProduct: Partial<Product> }>({
      query: ({ id, updatedProduct }) => ({
        url: `/products/${id}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: updatedProduct,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: 'Product', id },
        'Product' // Invalidate both specific product and all products list
      ],
    }),

    deleteProduct: builder.mutation<{ success: boolean }, number>({
      query: (id) => ({
        url: `/products/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [
        { type: 'Product', id },
        'Product' // Invalidate both specific product and all products list
      ],
    }),
  }),
});

// Hooks auto-generated by RTK Query
export const {
  useGetAllProductQuery,
  useGetProductByIdQuery,
  useAddNewProductMutation,
  useUpdateProductMutation,
  useDeleteProductMutation,
} = productsApi;
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// // Types for Product and API responses
// export interface Product {
//   id: number;
//   title: string;
//   description: string;
//   price: number;
//   [key: string]: any; // for flexibility, you can tighten this as needed
// }

// export interface ProductsResponse {
//   products: Product[];
//   total: number;
//   skip: number;
//   limit: number;
// }

// // API definition
// export const productsApi = createApi({
//   reducerPath: "products",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com" }),
//   endpoints: (builder) => ({
//     getAllProduct: builder.query<ProductsResponse, void>({
//       query: () => "/products",
//     }),

//     getProductById: builder.query<Product, number>({
//       query: (id) => `/products/${id}`,
//     }),

//     addNewProduct: builder.mutation<Product, Partial<Product>>({
//       query: (newProduct) => ({
//         url: `/products/add`,
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: newProduct,
//       }),
//     }),

//     updateProduct: builder.mutation<Product, { id: number; updatedProduct: Partial<Product> }>({
//       query: ({ id, updatedProduct }) => ({
//         url: `/products/${id}`,
//         method: "PUT",
//         headers: { "Content-Type": "application/json" },
//         body: updatedProduct,
//       }),
//     }),

//     deleteProduct: builder.mutation<{ success: boolean }, number>({
//       query: (id) => ({
//         url: `/products/${id}`,
//         method: "DELETE",
//       }),
//     }),
//   }),
// });

// // Hooks auto-generated by RTK Query
// export const {
//   useGetAllProductQuery,
//   useGetProductByIdQuery,
//   useAddNewProductMutation,
//   useUpdateProductMutation,
//   useDeleteProductMutation,
// } = productsApi;